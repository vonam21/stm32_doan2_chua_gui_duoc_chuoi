
do_an_2_uart_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080043c8  080043c8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c8  080043c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  2000005c  0800442c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800442c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc4f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc3  00000000  00000000  0002cd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fd  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018369  00000000  00000000  0003019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9b5  00000000  00000000  00048506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f37e  00000000  00000000  00056ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c28  00000000  00000000  000e623c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e9e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004324 	.word	0x08004324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004324 	.word	0x08004324

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000406:	2afd      	cmp	r2, #253	; 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	; 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	; 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	; 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2iz>:
 8000894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000898:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800089c:	d215      	bcs.n	80008ca <__aeabi_d2iz+0x36>
 800089e:	d511      	bpl.n	80008c4 <__aeabi_d2iz+0x30>
 80008a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a8:	d912      	bls.n	80008d0 <__aeabi_d2iz+0x3c>
 80008aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ba:	fa23 f002 	lsr.w	r0, r3, r2
 80008be:	bf18      	it	ne
 80008c0:	4240      	negne	r0, r0
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d105      	bne.n	80008dc <__aeabi_d2iz+0x48>
 80008d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008d4:	bf08      	it	eq
 80008d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	bf28      	it	cs
 8000a40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a44:	d2ed      	bcs.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_f2iz>:
 8000ba0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ba4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ba8:	d30f      	bcc.n	8000bca <__aeabi_f2iz+0x2a>
 8000baa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_f2iz+0x30>
 8000bb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc4:	bf18      	it	ne
 8000bc6:	4240      	negne	r0, r0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr
 8000bd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd4:	d101      	bne.n	8000bda <__aeabi_f2iz+0x3a>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_f2iz+0x46>
 8000bda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bde:	bf08      	it	eq
 8000be0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <count_cycles_state>:
uint32_t count,cycles,count_cycles[100],arr[100];
uint8_t data[4];
uint8_t arr_low[50];
uint8_t arr_high[50];
uint8_t arr_endline[50] = "\n\n";
uint32_t count_cycles_state(bool n) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    count =0;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <count_cycles_state+0x48>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 8000bfc:	e00b      	b.n	8000c16 <count_cycles_state+0x2a>
        count++;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <count_cycles_state+0x48>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <count_cycles_state+0x48>)
 8000c06:	6013      	str	r3, [r2, #0]
	if(count > 50) {
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <count_cycles_state+0x48>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b32      	cmp	r3, #50	; 0x32
 8000c0e:	d902      	bls.n	8000c16 <count_cycles_state+0x2a>
		return count;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <count_cycles_state+0x48>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	e00a      	b.n	8000c2c <count_cycles_state+0x40>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 8000c16:	2120      	movs	r1, #32
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <count_cycles_state+0x4c>)
 8000c1a:	f001 fc49 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d0ea      	beq.n	8000bfe <count_cycles_state+0x12>
	}
    }
    return count;
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <count_cycles_state+0x48>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000138 	.word	0x20000138
 8000c38:	40010800 	.word	0x40010800

08000c3c <Read_DHT11>:
void Read_DHT11(uint32_t* arr,uint8_t* data) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b08d      	sub	sp, #52	; 0x34
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4872      	ldr	r0, [pc, #456]	; (8000e34 <Read_DHT11+0x1f8>)
 8000c6c:	f001 fa9c 	bl	80021a8 <HAL_GPIO_Init>

  HAL_Delay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fe41 	bl	80018f8 <HAL_Delay>


  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2302      	movs	r3, #2
 8000c84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4869      	ldr	r0, [pc, #420]	; (8000e34 <Read_DHT11+0x1f8>)
 8000c8e:	f001 fa8b 	bl	80021a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2120      	movs	r1, #32
 8000c96:	4867      	ldr	r0, [pc, #412]	; (8000e34 <Read_DHT11+0x1f8>)
 8000c98:	f001 fc21 	bl	80024de <HAL_GPIO_WritePin>

  HAL_Delay(20);
 8000c9c:	2014      	movs	r0, #20
 8000c9e:	f000 fe2b 	bl	80018f8 <HAL_Delay>

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000caa:	2320      	movs	r3, #32
 8000cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	485e      	ldr	r0, [pc, #376]	; (8000e34 <Read_DHT11+0x1f8>)
 8000cba:	f001 fa75 	bl	80021a8 <HAL_GPIO_Init>
  for(int i=0;i< 160;i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc2:	e003      	b.n	8000ccc <Read_DHT11+0x90>
	  __NOP();
 8000cc4:	bf00      	nop
  for(int i=0;i< 160;i++) {
 8000cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc8:	3301      	adds	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	2b9f      	cmp	r3, #159	; 0x9f
 8000cd0:	ddf8      	ble.n	8000cc4 <Read_DHT11+0x88>
  }
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 8000cd2:	bf00      	nop
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	4857      	ldr	r0, [pc, #348]	; (8000e34 <Read_DHT11+0x1f8>)
 8000cd8:	f001 fbea 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f8      	beq.n	8000cd4 <Read_DHT11+0x98>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 8000ce2:	bf00      	nop
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	4853      	ldr	r0, [pc, #332]	; (8000e34 <Read_DHT11+0x1f8>)
 8000ce8:	f001 fbe2 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d0f8      	beq.n	8000ce4 <Read_DHT11+0xa8>

  for(int i=0; i< 100 ; i+=2) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf6:	e027      	b.n	8000d48 <Read_DHT11+0x10c>
	  count_cycles[i] = count_cycles_state(0);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ff77 	bl	8000bec <count_cycles_state>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	494d      	ldr	r1, [pc, #308]	; (8000e38 <Read_DHT11+0x1fc>)
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  count_cycles[i+1] = count_cycles_state(1);
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	1c5c      	adds	r4, r3, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff6d 	bl	8000bec <count_cycles_state>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a48      	ldr	r2, [pc, #288]	; (8000e38 <Read_DHT11+0x1fc>)
 8000d16:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  arr[i] = count_cycles[i];
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4945      	ldr	r1, [pc, #276]	; (8000e38 <Read_DHT11+0x1fc>)
 8000d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d2a:	601a      	str	r2, [r3, #0]
	  arr[i+1] = count_cycles[i+1];
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	3301      	adds	r3, #1
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	440b      	add	r3, r1
 8000d3a:	493f      	ldr	r1, [pc, #252]	; (8000e38 <Read_DHT11+0x1fc>)
 8000d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d40:	601a      	str	r2, [r3, #0]
  for(int i=0; i< 100 ; i+=2) {
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	3302      	adds	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4a:	2b63      	cmp	r3, #99	; 0x63
 8000d4c:	ddd4      	ble.n	8000cf8 <Read_DHT11+0xbc>
  }

  data[1] = 0x00;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
  data[2] = 0x00;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	3302      	adds	r3, #2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
  data[3] = 0x00;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	3303      	adds	r3, #3
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
  data[4] = 0x00;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	e03d      	b.n	8000df0 <Read_DHT11+0x1b4>
	  uint32_t lowCycles = arr[2 * i];
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	61fb      	str	r3, [r7, #28]
	  uint32_t highCycles = arr[2 * i + 1];
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	3304      	adds	r3, #4
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
	  if ((lowCycles >= CYCLE_MAX) || (highCycles >= CYCLE_MAX)) {
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	2b31      	cmp	r3, #49	; 0x31
 8000d92:	d802      	bhi.n	8000d9a <Read_DHT11+0x15e>
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2b31      	cmp	r3, #49	; 0x31
 8000d98:	d904      	bls.n	8000da4 <Read_DHT11+0x168>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <Read_DHT11+0x200>)
 8000da0:	f001 fbb5 	bl	800250e <HAL_GPIO_TogglePin>
	  }
	  data[i / 8] <<= 1;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da00      	bge.n	8000dac <Read_DHT11+0x170>
 8000daa:	3307      	adds	r3, #7
 8000dac:	10db      	asrs	r3, r3, #3
 8000dae:	4619      	mov	r1, r3
 8000db0:	460a      	mov	r2, r1
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	440b      	add	r3, r1
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	701a      	strb	r2, [r3, #0]
	  if (highCycles > lowCycles) {
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d90f      	bls.n	8000dea <Read_DHT11+0x1ae>
		  data[i / 8] |= 1;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <Read_DHT11+0x196>
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	10db      	asrs	r3, r3, #3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	440b      	add	r3, r1
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	2b27      	cmp	r3, #39	; 0x27
 8000df4:	ddbe      	ble.n	8000d74 <Read_DHT11+0x138>
	  }

  }
  uint8_t check_sum = ( data[0]+ data[1]+ data[2]+ data[3] ) & 0xFF;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3302      	adds	r3, #2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if(check_sum == data[4]) {
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d000      	beq.n	8000e2a <Read_DHT11+0x1ee>

  }else {
	  while(1);
 8000e28:	e7fe      	b.n	8000e28 <Read_DHT11+0x1ec>
  }



}
 8000e2a:	bf00      	nop
 8000e2c:	3734      	adds	r7, #52	; 0x34
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010800 	.word	0x40010800
 8000e38:	2000013c 	.word	0x2000013c
 8000e3c:	40011000 	.word	0x40011000

08000e40 <ftostr>:


void ftostr(double num, int digits,char *buff)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b092      	sub	sp, #72	; 0x48
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
int i_temp = (int)num;
 8000e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e52:	f7ff fd1f 	bl	8000894 <__aeabi_d2iz>
 8000e56:	4603      	mov	r3, r0
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44

float f_temp = num-i_temp;
 8000e5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e5c:	f7ff fcb0 	bl	80007c0 <__aeabi_i2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e68:	f7ff fb5c 	bl	8000524 <__aeabi_dsub>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fd36 	bl	80008e4 <__aeabi_d2f>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40

char temp_s[20];
int i_len = i_temp>0 ?1:2;
 8000e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	dd01      	ble.n	8000e86 <ftostr+0x46>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <ftostr+0x48>
 8000e86:	2302      	movs	r3, #2
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c

int ref_len = i_len;
 8000e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
int var = i_temp;
 8000e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38

while(var)
 8000e92:	e00a      	b.n	8000eaa <ftostr+0x6a>
{
i_len += 1;
 8000e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e96:	3301      	adds	r3, #1
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
var /=10;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	4a59      	ldr	r2, [pc, #356]	; (8001004 <ftostr+0x1c4>)
 8000e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea2:	1092      	asrs	r2, r2, #2
 8000ea4:	17db      	asrs	r3, r3, #31
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
while(var)
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f1      	bne.n	8000e94 <ftostr+0x54>
}

int temp_len = i_len;
 8000eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34

for(int i=0;i<digits;i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8000eb8:	e086      	b.n	8000fc8 <ftostr+0x188>
{
if(temp_len==ref_len)
 8000eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d11a      	bne.n	8000ef8 <ftostr+0xb8>
{
temp_s[i_len-2-i]='0' + i_temp%10;
 8000ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <ftostr+0x1c4>)
 8000ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eca:	1099      	asrs	r1, r3, #2
 8000ecc:	17d3      	asrs	r3, r2, #31
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ede:	1e99      	subs	r1, r3, #2
 8000ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	3230      	adds	r2, #48	; 0x30
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	3348      	adds	r3, #72	; 0x48
 8000eea:	443b      	add	r3, r7
 8000eec:	f803 2c34 	strb.w	r2, [r3, #-52]
temp_len -= 1;
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef6:	e025      	b.n	8000f44 <ftostr+0x104>
}
else if(temp_len>ref_len)
 8000ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dd21      	ble.n	8000f44 <ftostr+0x104>
{
temp_s[i_len-2-i]='0' + i_temp%10;
 8000f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f02:	4b40      	ldr	r3, [pc, #256]	; (8001004 <ftostr+0x1c4>)
 8000f04:	fb83 1302 	smull	r1, r3, r3, r2
 8000f08:	1099      	asrs	r1, r3, #2
 8000f0a:	17d3      	asrs	r3, r2, #31
 8000f0c:	1ac9      	subs	r1, r1, r3
 8000f0e:	460b      	mov	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	1ad1      	subs	r1, r2, r3
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1c:	1e99      	subs	r1, r3, #2
 8000f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f20:	1acb      	subs	r3, r1, r3
 8000f22:	3230      	adds	r2, #48	; 0x30
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	3348      	adds	r3, #72	; 0x48
 8000f28:	443b      	add	r3, r7
 8000f2a:	f803 2c34 	strb.w	r2, [r3, #-52]
i_temp /= 10;
 8000f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <ftostr+0x1c4>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1092      	asrs	r2, r2, #2
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
temp_len -= 1;
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	3b01      	subs	r3, #1
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
}
if(i_len-1 == i)
 8000f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d110      	bne.n	8000f70 <ftostr+0x130>
{
temp_s[i] = '.';
 8000f4e:	f107 0214 	add.w	r2, r7, #20
 8000f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f54:	4413      	add	r3, r2
 8000f56:	222e      	movs	r2, #46	; 0x2e
 8000f58:	701a      	strb	r2, [r3, #0]
temp_len -= ref_len==2?1:0;
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6e:	e028      	b.n	8000fc2 <ftostr+0x182>
}
else if(temp_len == 0)
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d125      	bne.n	8000fc2 <ftostr+0x182>
{
temp_s[i] =(int)(f_temp*10)+'0';
 8000f76:	4924      	ldr	r1, [pc, #144]	; (8001008 <ftostr+0x1c8>)
 8000f78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f7a:	f7ff fa1b 	bl	80003b4 <__aeabi_fmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe0d 	bl	8000ba0 <__aeabi_f2iz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3330      	adds	r3, #48	; 0x30
 8000f8c:	b2d9      	uxtb	r1, r3
 8000f8e:	f107 0214 	add.w	r2, r7, #20
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	4413      	add	r3, r2
 8000f96:	460a      	mov	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
f_temp = f_temp *10;
 8000f9a:	491b      	ldr	r1, [pc, #108]	; (8001008 <ftostr+0x1c8>)
 8000f9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f9e:	f7ff fa09 	bl	80003b4 <__aeabi_fmul>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
f_temp = f_temp - (int)f_temp;
 8000fa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fa8:	f7ff fdfa 	bl	8000ba0 <__aeabi_f2iz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fda2 	bl	8000af8 <__aeabi_i2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000fba:	f7ff fce7 	bl	800098c <__aeabi_fsub>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
for(int i=0;i<digits;i++)
 8000fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f6ff af74 	blt.w	8000eba <ftostr+0x7a>
}
}

for(int i=0;i<=digits;i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd6:	e00b      	b.n	8000ff0 <ftostr+0x1b0>
{
buff[i] = temp_s[i];
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f107 0114 	add.w	r1, r7, #20
 8000fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe4:	440a      	add	r2, r1
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
for(int i=0;i<=digits;i++)
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	3301      	adds	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	ddef      	ble.n	8000fd8 <ftostr+0x198>
}
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3748      	adds	r7, #72	; 0x48
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	66666667 	.word	0x66666667
 8001008:	41200000 	.word	0x41200000
 800100c:	00000000 	.word	0x00000000

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	f5ad 6db9 	sub.w	sp, sp, #1480	; 0x5c8
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buffer[20]= "gia tri ADC la:";
 8001018:	4b89      	ldr	r3, [pc, #548]	; (8001240 <main+0x230>)
 800101a:	f507 64b4 	add.w	r4, r7, #1440	; 0x5a0
 800101e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
	char chuoi_n[50];
	uint8_t chuoi_ret[1000];
	uint8_t chuoi_met[50];
	uint8_t chuoi1[20];
	uint8_t chuoi1_t[20];
	uint8_t stt[20]= "\n\n\n\n";
 800102a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800102e:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 8001032:	4984      	ldr	r1, [pc, #528]	; (8001244 <main+0x234>)
 8001034:	4613      	mov	r3, r2
 8001036:	c903      	ldmia	r1, {r0, r1}
 8001038:	6018      	str	r0, [r3, #0]
 800103a:	3304      	adds	r3, #4
 800103c:	7019      	strb	r1, [r3, #0]
 800103e:	1d53      	adds	r3, r2, #5
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	f8c3 200b 	str.w	r2, [r3, #11]
	uint32_t var_adc =0;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fbef 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f901 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 fa11 	bl	8001480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800105e:	f000 f9e5 	bl	800142c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001062:	f000 f993 	bl	800138c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001066:	f000 f953 	bl	8001310 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <main+0x238>)
 800106c:	f000 fd40 	bl	8001af0 <HAL_ADC_Start>
	  HAL_Delay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f000 fc41 	bl	80018f8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, buffer,strlen((const char*)buffer),10);
 8001076:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f868 	bl	8000150 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001088:	230a      	movs	r3, #10
 800108a:	4870      	ldr	r0, [pc, #448]	; (800124c <main+0x23c>)
 800108c:	f002 fb18 	bl	80036c0 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8001090:	f241 3088 	movw	r0, #5000	; 0x1388
 8001094:	f000 fc30 	bl	80018f8 <HAL_Delay>
	  Read_DHT11(arr,data); // đ�?c dht11
 8001098:	496d      	ldr	r1, [pc, #436]	; (8001250 <main+0x240>)
 800109a:	486e      	ldr	r0, [pc, #440]	; (8001254 <main+0x244>)
 800109c:	f7ff fdce 	bl	8000c3c <Read_DHT11>
	  float temp = data[2] + data[3]*0.1;
 80010a0:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <main+0x240>)
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb8b 	bl	80007c0 <__aeabi_i2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4b68      	ldr	r3, [pc, #416]	; (8001250 <main+0x240>)
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb84 	bl	80007c0 <__aeabi_i2d>
 80010b8:	a35f      	add	r3, pc, #380	; (adr r3, 8001238 <main+0x228>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff f84f 	bl	8000160 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff fa2d 	bl	8000528 <__adddf3>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fc05 	bl	80008e4 <__aeabi_d2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
	  float humi = data[0] + data[1]*0.1;
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <main+0x240>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fb6b 	bl	80007c0 <__aeabi_i2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <main+0x240>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fb64 	bl	80007c0 <__aeabi_i2d>
 80010f8:	a34f      	add	r3, pc, #316	; (adr r3, 8001238 <main+0x228>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f82f 	bl	8000160 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff fa0d 	bl	8000528 <__adddf3>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fbe5 	bl	80008e4 <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
	  char tx_humi[100];
	  char tx[100];
	  ftostr(humi,3,tx_humi);
 8001120:	f8d7 05b4 	ldr.w	r0, [r7, #1460]	; 0x5b4
 8001124:	f7ff fb5e 	bl	80007e4 <__aeabi_f2d>
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2203      	movs	r2, #3
 800112c:	f7ff fe88 	bl	8000e40 <ftostr>
	  HAL_UART_Transmit(&huart1, tx_humi, strlen(tx_humi), 10);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f80c 	bl	8000150 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	1d39      	adds	r1, r7, #4
 800113e:	230a      	movs	r3, #10
 8001140:	4842      	ldr	r0, [pc, #264]	; (800124c <main+0x23c>)
 8001142:	f002 fabd 	bl	80036c0 <HAL_UART_Transmit>
	  ftostr(temp,3,tx);
 8001146:	f8d7 05b8 	ldr.w	r0, [r7, #1464]	; 0x5b8
 800114a:	f7ff fb4b 	bl	80007e4 <__aeabi_f2d>
 800114e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001152:	2203      	movs	r2, #3
 8001154:	f7ff fe74 	bl	8000e40 <ftostr>
	  HAL_Delay(1000);
 8001158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115c:	f000 fbcc 	bl	80018f8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, tx, strlen(tx), 10);
 8001160:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001164:	4618      	mov	r0, r3
 8001166:	f7fe fff3 	bl	8000150 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001172:	230a      	movs	r3, #10
 8001174:	4835      	ldr	r0, [pc, #212]	; (800124c <main+0x23c>)
 8001176:	f002 faa3 	bl	80036c0 <HAL_UART_Transmit>
	  for(int i =0;i < 100;i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8001180:	e016      	b.n	80011b0 <main+0x1a0>
		  tx_humi[i]=0;
 8001182:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001186:	f2a3 52c4 	subw	r2, r3, #1476	; 0x5c4
 800118a:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800118e:	4413      	add	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		  tx[i] = 0;
 8001194:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001198:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800119c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80011a0:	4413      	add	r3, r2
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	  for(int i =0;i < 100;i++) {
 80011a6:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80011b0:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80011b4:	2b63      	cmp	r3, #99	; 0x63
 80011b6:	dde4      	ble.n	8001182 <main+0x172>
	  }
	  HAL_Delay(1000);
 80011b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011bc:	f000 fb9c 	bl	80018f8 <HAL_Delay>
	  var_adc = HAL_ADC_GetValue(&hadc1);   // đ�?c adc quang trở
 80011c0:	4821      	ldr	r0, [pc, #132]	; (8001248 <main+0x238>)
 80011c2:	f000 fd43 	bl	8001c4c <HAL_ADC_GetValue>
 80011c6:	f8c7 05bc 	str.w	r0, [r7, #1468]	; 0x5bc
	  sprintf(buffer_adc, "%ld", var_adc);
 80011ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ce:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <main+0x248>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fbf3 	bl	80039c0 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer_adc, strlen(buffer_adc), 10);
 80011da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe ffb6 	bl	8000150 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80011ec:	230a      	movs	r3, #10
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <main+0x23c>)
 80011f0:	f002 fa66 	bl	80036c0 <HAL_UART_Transmit>
	  for(int i=0;i< strlen(buffer);i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80011fa:	e00b      	b.n	8001214 <main+0x204>
	  		  buffer[i] = 0;
 80011fc:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8001200:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8001204:	4413      	add	r3, r2
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i< strlen(buffer);i++) {
 800120a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800120e:	3301      	adds	r3, #1
 8001210:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8001214:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ff99 	bl	8000150 <strlen>
 800121e:	4602      	mov	r2, r0
 8001220:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8001224:	429a      	cmp	r2, r3
 8001226:	d8e9      	bhi.n	80011fc <main+0x1ec>
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
//	  }
//	  else{
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
//	  }
	  HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f000 fb64 	bl	80018f8 <HAL_Delay>
  {
 8001230:	e71b      	b.n	800106a <main+0x5a>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	9999999a 	.word	0x9999999a
 800123c:	3fb99999 	.word	0x3fb99999
 8001240:	08004340 	.word	0x08004340
 8001244:	08004354 	.word	0x08004354
 8001248:	20000078 	.word	0x20000078
 800124c:	200000f0 	.word	0x200000f0
 8001250:	2000045c 	.word	0x2000045c
 8001254:	200002cc 	.word	0x200002cc
 8001258:	0800433c 	.word	0x0800433c

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2228      	movs	r2, #40	; 0x28
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fbc8 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 f944 	bl	8002540 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012be:	f000 f94f 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fbb1 	bl	8002a44 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012e8:	f000 f93a 	bl	8001560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ec:	2302      	movs	r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80012f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fd31 	bl	8002d60 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001304:	f000 f92c 	bl	8001560 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_ADC1_Init+0x74>)
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <MX_ADC1_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_ADC1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_ADC1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_ADC1_Init+0x74>)
 800133a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800133e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_ADC1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_ADC1_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_ADC1_Init+0x74>)
 800134e:	f000 faf7 	bl	8001940 <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f902 	bl	8001560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800135c:	2306      	movs	r3, #6
 800135e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001360:	2301      	movs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_ADC1_Init+0x74>)
 800136e:	f000 fc79 	bl	8001c64 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001378:	f000 f8f2 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000078 	.word	0x20000078
 8001388:	40012400 	.word	0x40012400

0800138c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM1_Init+0x98>)
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <MX_TIM1_Init+0x9c>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM1_Init+0x98>)
 80013b0:	221f      	movs	r2, #31
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_TIM1_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM1_Init+0x98>)
 80013bc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80013c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_TIM1_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM1_Init+0x98>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_TIM1_Init+0x98>)
 80013d6:	f001 fd79 	bl	8002ecc <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013e0:	f000 f8be 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM1_Init+0x98>)
 80013f2:	f001 fec2 	bl	800317a <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013fc:	f000 f8b0 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM1_Init+0x98>)
 800140e:	f002 f897 	bl	8003540 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001418:	f000 f8a2 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000a8 	.word	0x200000a8
 8001428:	40012c00 	.word	0x40012c00

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART1_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001464:	f002 f8dc 	bl	8003620 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 f877 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000f0 	.word	0x200000f0
 800147c:	40013800 	.word	0x40013800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_GPIO_Init+0xb4>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <MX_GPIO_Init+0xb4>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_GPIO_Init+0xb4>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_GPIO_Init+0xb8>)
 80014e4:	f000 fffb 	bl	80024de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2120      	movs	r1, #32
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0xbc>)
 80014ee:	f000 fff6 	bl	80024de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2302      	movs	r3, #2
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0xb8>)
 800150c:	f000 fe4c 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001510:	2320      	movs	r3, #32
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_GPIO_Init+0xbc>)
 8001528:	f000 fe3e 	bl	80021a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40011000 	.word	0x40011000
 800153c:	40010800 	.word	0x40010800

08001540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800154e:	f000 ffde 	bl	800250e <HAL_GPIO_TogglePin>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40011000 	.word	0x40011000

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_MspInit+0x40>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_MspInit+0x40>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x40>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_MspInit+0x40>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_MspInit+0x40>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_MspInit+0x40>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_ADC_MspInit+0x6c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d121      	bne.n	8001614 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_ADC_MspInit+0x70>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_ADC_MspInit+0x74>)
 8001610:	f000 fdca 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40012400 	.word	0x40012400
 8001620:	40021000 	.word	0x40021000
 8001624:	40010800 	.word	0x40010800

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_TIM_Base_MspInit+0x44>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d113      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2019      	movs	r0, #25
 8001658:	f000 fd6f 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800165c:	2019      	movs	r0, #25
 800165e:	f000 fd88 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_UART_MspInit+0x8c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d131      	bne.n	80016f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_MspInit+0x90>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_UART_MspInit+0x90>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x90>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x90>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_UART_MspInit+0x90>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x90>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016da:	f000 fd65 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016f4:	f000 fd58 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40013800 	.word	0x40013800
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 f8b5 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM1_UP_IRQHandler+0x10>)
 8001762:	f001 fc02 	bl	8002f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000a8 	.word	0x200000a8

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f002 f936 	bl	8003a10 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20000460 	.word	0x20000460
 80017d8:	200005b0 	.word	0x200005b0

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff fff8 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001804:	4c09      	ldr	r4, [pc, #36]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f002 f903 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fbfb 	bl	8001010 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001824:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8001828:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800182c:	200005b0 	.word	0x200005b0

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 fc6d 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fe8c 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fc85 	bl	800218e <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 fc4d 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000464 	.word	0x20000464

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000464 	.word	0x20000464

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff0 	bl	80018e4 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffe0 	bl	80018e4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0be      	b.n	8001ae0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe16 	bl	80015b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fabf 	bl	8001f08 <ADC_ConversionStop_Disable>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8099 	bne.w	8001ace <HAL_ADC_Init+0x18e>
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8095 	bne.w	8001ace <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ac:	f023 0302 	bic.w	r3, r3, #2
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d8:	d003      	beq.n	80019e2 <HAL_ADC_Init+0xa2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HAL_ADC_Init+0xa8>
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	e000      	b.n	80019ea <HAL_ADC_Init+0xaa>
 80019e8:	2300      	movs	r3, #0
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7d1b      	ldrb	r3, [r3, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d119      	bne.n	8001a2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	035a      	lsls	r2, r3, #13
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e00b      	b.n	8001a2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f043 0220 	orr.w	r2, r3, #32
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_ADC_Init+0x1a8>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5c:	d003      	beq.n	8001a66 <HAL_ADC_Init+0x126>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d104      	bne.n	8001a70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	051b      	lsls	r3, r3, #20
 8001a6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_ADC_Init+0x1ac>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aaa:	e018      	b.n	8001ade <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f023 0312 	bic.w	r3, r3, #18
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001acc:	e007      	b.n	8001ade <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffe1f7fd 	.word	0xffe1f7fd
 8001aec:	ff1f0efe 	.word	0xff1f0efe

08001af0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Start+0x1a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e098      	b.n	8001c3c <HAL_ADC_Start+0x14c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f99e 	bl	8001e54 <ADC_Enable>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8087 	bne.w	8001c32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_ADC_Start+0x154>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_Start+0x5e>
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_ADC_Start+0x158>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d026      	beq.n	8001bb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b78:	e01d      	b.n	8001bb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <HAL_ADC_Start+0x158>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_Start+0xaa>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <HAL_ADC_Start+0x154>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10d      	bne.n	8001bb6 <HAL_ADC_Start+0xc6>
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_ADC_Start+0x158>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f023 0206 	bic.w	r2, r3, #6
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0202 	mvn.w	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bf2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bf6:	d113      	bne.n	8001c20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_ADC_Start+0x154>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_ADC_Start+0x158>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	e00c      	b.n	8001c3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40012800 	.word	0x40012800
 8001c48:	40012400 	.word	0x40012400

08001c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x20>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e0dc      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x1da>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d81c      	bhi.n	8001cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b05      	subs	r3, #5
 8001ca6:	221f      	movs	r2, #31
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4019      	ands	r1, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b05      	subs	r3, #5
 8001cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34
 8001ccc:	e03c      	b.n	8001d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d81c      	bhi.n	8001d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	; 0x23
 8001ce8:	221f      	movs	r2, #31
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4019      	ands	r1, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b23      	subs	r3, #35	; 0x23
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0e:	e01b      	b.n	8001d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b41      	subs	r3, #65	; 0x41
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b41      	subs	r3, #65	; 0x41
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d91c      	bls.n	8001d8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68d9      	ldr	r1, [r3, #12]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6898      	ldr	r0, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	e019      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6919      	ldr	r1, [r3, #16]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6898      	ldr	r0, [r3, #8]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d003      	beq.n	8001dce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dca:	2b11      	cmp	r3, #17
 8001dcc:	d132      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d125      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d126      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001df4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d11a      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9a      	lsrs	r2, r3, #18
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e14:	e002      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f9      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x1b2>
 8001e22:	e007      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40012400 	.word	0x40012400
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	431bde83 	.word	0x431bde83

08001e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d040      	beq.n	8001ef4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <ADC_Enable+0xac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <ADC_Enable+0xb0>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e90:	e002      	b.n	8001e98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fd21 	bl	80018e4 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea4:	e01f      	b.n	8001ee6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ea6:	f7ff fd1d 	bl	80018e4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d918      	bls.n	8001ee6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d011      	beq.n	8001ee6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e007      	b.n	8001ef6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d1d8      	bne.n	8001ea6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d12e      	bne.n	8001f80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f32:	f7ff fcd7 	bl	80018e4 <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f38:	e01b      	b.n	8001f72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f3a:	f7ff fcd3 	bl	80018e4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d914      	bls.n	8001f72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10d      	bne.n	8001f72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e007      	b.n	8001f82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d0dc      	beq.n	8001f3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4906      	ldr	r1, [pc, #24]	; (8002024 <__NVIC_EnableIRQ+0x34>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff90 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff2d 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff42 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff35 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e169      	b.n	8002490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8158 	bne.w	800248a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a9a      	ldr	r2, [pc, #616]	; (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021e4:	4a98      	ldr	r2, [pc, #608]	; (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d875      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021ea:	4a98      	ldr	r2, [pc, #608]	; (800244c <HAL_GPIO_Init+0x2a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d058      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021f0:	4a96      	ldr	r2, [pc, #600]	; (800244c <HAL_GPIO_Init+0x2a4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d86f      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021f6:	4a96      	ldr	r2, [pc, #600]	; (8002450 <HAL_GPIO_Init+0x2a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d052      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021fc:	4a94      	ldr	r2, [pc, #592]	; (8002450 <HAL_GPIO_Init+0x2a8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d869      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002202:	4a94      	ldr	r2, [pc, #592]	; (8002454 <HAL_GPIO_Init+0x2ac>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04c      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002208:	4a92      	ldr	r2, [pc, #584]	; (8002454 <HAL_GPIO_Init+0x2ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d863      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800220e:	4a92      	ldr	r2, [pc, #584]	; (8002458 <HAL_GPIO_Init+0x2b0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d046      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002214:	4a90      	ldr	r2, [pc, #576]	; (8002458 <HAL_GPIO_Init+0x2b0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d85d      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d82a      	bhi.n	8002274 <HAL_GPIO_Init+0xcc>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d859      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <HAL_GPIO_Init+0x80>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	080022a3 	.word	0x080022a3
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800228f 	.word	0x0800228f
 8002234:	080022d1 	.word	0x080022d1
 8002238:	080022d7 	.word	0x080022d7
 800223c:	080022d7 	.word	0x080022d7
 8002240:	080022d7 	.word	0x080022d7
 8002244:	080022d7 	.word	0x080022d7
 8002248:	080022d7 	.word	0x080022d7
 800224c:	080022d7 	.word	0x080022d7
 8002250:	080022d7 	.word	0x080022d7
 8002254:	080022d7 	.word	0x080022d7
 8002258:	080022d7 	.word	0x080022d7
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022d7 	.word	0x080022d7
 8002264:	080022d7 	.word	0x080022d7
 8002268:	080022d7 	.word	0x080022d7
 800226c:	08002285 	.word	0x08002285
 8002270:	08002299 	.word	0x08002299
 8002274:	4a79      	ldr	r2, [pc, #484]	; (800245c <HAL_GPIO_Init+0x2b4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227a:	e02c      	b.n	80022d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e029      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e024      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	3308      	adds	r3, #8
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e01f      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	330c      	adds	r3, #12
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e01a      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022aa:	2304      	movs	r3, #4
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e013      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	611a      	str	r2, [r3, #16]
          break;
 80022c2:	e009      	b.n	80022d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c4:	2308      	movs	r3, #8
 80022c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	615a      	str	r2, [r3, #20]
          break;
 80022ce:	e003      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          break;
 80022d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d801      	bhi.n	80022e2 <HAL_GPIO_Init+0x13a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_Init+0x13e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2bff      	cmp	r3, #255	; 0xff
 80022ec:	d802      	bhi.n	80022f4 <HAL_GPIO_Init+0x14c>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x152>
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	3b08      	subs	r3, #8
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	210f      	movs	r1, #15
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80b1 	beq.w	800248a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x2bc>)
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a40      	ldr	r2, [pc, #256]	; (8002468 <HAL_GPIO_Init+0x2c0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x1ec>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_GPIO_Init+0x2c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1e8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <HAL_GPIO_Init+0x2c8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1e4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <HAL_GPIO_Init+0x2cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1e0>
 8002384:	2303      	movs	r3, #3
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002388:	2304      	movs	r3, #4
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002394:	2300      	movs	r3, #0
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a6:	492f      	ldr	r1, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x2bc>)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	492c      	ldr	r1, [pc, #176]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4928      	ldr	r1, [pc, #160]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	491e      	ldr	r1, [pc, #120]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4918      	ldr	r1, [pc, #96]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4914      	ldr	r1, [pc, #80]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d021      	beq.n	800247c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e021      	b.n	800248a <HAL_GPIO_Init+0x2e2>
 8002446:	bf00      	nop
 8002448:	10320000 	.word	0x10320000
 800244c:	10310000 	.word	0x10310000
 8002450:	10220000 	.word	0x10220000
 8002454:	10210000 	.word	0x10210000
 8002458:	10120000 	.word	0x10120000
 800245c:	10110000 	.word	0x10110000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_GPIO_Init+0x304>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	43db      	mvns	r3, r3
 8002484:	4909      	ldr	r1, [pc, #36]	; (80024ac <HAL_GPIO_Init+0x304>)
 8002486:	4013      	ands	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f ae8e 	bne.w	80021bc <HAL_GPIO_Init+0x14>
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	372c      	adds	r7, #44	; 0x2c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40010400 	.word	0x40010400

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
 80024ea:	4613      	mov	r3, r2
 80024ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ee:	787b      	ldrb	r3, [r7, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f4:	887a      	ldrh	r2, [r7, #2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fa:	e003      	b.n	8002504 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43d9      	mvns	r1, r3
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	400b      	ands	r3, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e272      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
 8002578:	4b8c      	ldr	r3, [pc, #560]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d10b      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d06c      	beq.n	800266c <HAL_RCC_OscConfig+0x12c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d168      	bne.n	800266c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e24c      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x76>
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e02e      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b78      	ldr	r3, [pc, #480]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a77      	ldr	r2, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0xbc>
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a71      	ldr	r2, [pc, #452]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff f962 	bl	80018e4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff f95e 	bl	80018e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e200      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xe4>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff f94e 	bl	80018e4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff f94a 	bl	80018e4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1ec      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x10c>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c0      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff f903 	bl	80018e4 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7ff f8ff 	bl	80018e4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4927      	ldr	r1, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff f8e2 	bl	80018e4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7ff f8de 	bl	80018e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e180      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d019      	beq.n	800278a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7ff f8c2 	bl	80018e4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff f8be 	bl	80018e4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e160      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002782:	2001      	movs	r0, #1
 8002784:	f000 face 	bl	8002d24 <RCC_Delay>
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7ff f8a8 	bl	80018e4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7ff f8a4 	bl	80018e4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d908      	bls.n	80027b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e146      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	42420000 	.word	0x42420000
 80027b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e9      	bne.n	8002798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a6 	beq.w	800291e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a87      	ldr	r2, [pc, #540]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b7f      	ldr	r3, [pc, #508]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7e      	ldr	r2, [pc, #504]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7ff f865 	bl	80018e4 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7ff f861 	bl	80018e4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	; 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e103      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x312>
 8002844:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e02d      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x334>
 800285a:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a69      	ldr	r2, [pc, #420]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	e01c      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x356>
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002896:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a57      	ldr	r2, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7ff f815 	bl	80018e4 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7ff f811 	bl	80018e4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0b1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ee      	beq.n	80028be <HAL_RCC_OscConfig+0x37e>
 80028e0:	e014      	b.n	800290c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe ffff 	bl	80018e4 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fffb 	bl	80018e4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e09b      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ee      	bne.n	80028ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d061      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d146      	bne.n	80029ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe ffcf 	bl	80018e4 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe ffcb 	bl	80018e4 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e06d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4921      	ldr	r1, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a19      	ldr	r1, [r3, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	430b      	orrs	r3, r1
 8002996:	491b      	ldr	r1, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe ff9f 	bl	80018e4 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe ff9b 	bl	80018e4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x46a>
 80029c8:	e035      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe ff88 	bl	80018e4 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe ff84 	bl	80018e4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e026      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x498>
 80029f6:	e01e      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e019      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x500>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d0      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4965      	ldr	r1, [pc, #404]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d040      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d115      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e073      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4936      	ldr	r1, [pc, #216]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fed6 	bl	80018e4 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe fed2 	bl	80018e4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e053      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d210      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4922      	ldr	r1, [pc, #136]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1cc>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fe34 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08004368 	.word	0x08004368
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x36>
 8002c46:	e027      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	e027      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0c5b      	lsrs	r3, r3, #17
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e004      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	613b      	str	r3, [r7, #16]
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	693b      	ldr	r3, [r7, #16]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	08004380 	.word	0x08004380
 8002cb8:	08004390 	.word	0x08004390
 8002cbc:	003d0900 	.word	0x003d0900

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b02      	ldr	r3, [pc, #8]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff2 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08004378 	.word	0x08004378

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0adb      	lsrs	r3, r3, #11
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08004378 	.word	0x08004378

08002d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <RCC_Delay+0x34>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <RCC_Delay+0x38>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0a5b      	lsrs	r3, r3, #9
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d40:	bf00      	nop
  }
  while (Delay --);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e5a      	subs	r2, r3, #1
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f9      	bne.n	8002d40 <RCC_Delay+0x1c>
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d07d      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	61d3      	str	r3, [r2, #28]
 8002d98:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d118      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a42      	ldr	r2, [pc, #264]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fd90 	bl	80018e4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	e008      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fe fd8c 	bl	80018e4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e06d      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02e      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d027      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e04:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e1a:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d014      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fd5b 	bl	80018e4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fd57 	bl	80018e4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e036      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4917      	ldr	r1, [pc, #92]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	490b      	ldr	r1, [pc, #44]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42420440 	.word	0x42420440

08002ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e041      	b.n	8002f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fb98 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 fa20 	bl	8003350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d122      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0202 	mvn.w	r2, #2
 8002f96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f9b4 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8002fb2:	e005      	b.n	8002fc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f9a7 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9b6 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d122      	bne.n	800301a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d11b      	bne.n	800301a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f06f 0204 	mvn.w	r2, #4
 8002fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f98a 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8003006:	e005      	b.n	8003014 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f97d 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f98c 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d122      	bne.n	800306e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11b      	bne.n	800306e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0208 	mvn.w	r2, #8
 800303e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f960 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 800305a:	e005      	b.n	8003068 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f953 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f962 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d122      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d11b      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f06f 0210 	mvn.w	r2, #16
 8003092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2208      	movs	r2, #8
 8003098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f936 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 80030ae:	e005      	b.n	80030bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f929 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f938 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10e      	bne.n	80030ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0201 	mvn.w	r2, #1
 80030e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fe fa29 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d10e      	bne.n	800311a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d107      	bne.n	800311a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fa7a 	bl	800360e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d10e      	bne.n	8003146 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d107      	bne.n	8003146 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8fc 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d10e      	bne.n	8003172 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d107      	bne.n	8003172 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0220 	mvn.w	r2, #32
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fa45 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_TIM_ConfigClockSource+0x1c>
 8003192:	2302      	movs	r3, #2
 8003194:	e0b4      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x186>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	d03e      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xd4>
 80031d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d4:	f200 8087 	bhi.w	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	f000 8086 	beq.w	80032ec <HAL_TIM_ConfigClockSource+0x172>
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d87f      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 80031e6:	2b70      	cmp	r3, #112	; 0x70
 80031e8:	d01a      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xa6>
 80031ea:	2b70      	cmp	r3, #112	; 0x70
 80031ec:	d87b      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 80031ee:	2b60      	cmp	r3, #96	; 0x60
 80031f0:	d050      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x11a>
 80031f2:	2b60      	cmp	r3, #96	; 0x60
 80031f4:	d877      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	2b50      	cmp	r3, #80	; 0x50
 80031f8:	d03c      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0xfa>
 80031fa:	2b50      	cmp	r3, #80	; 0x50
 80031fc:	d873      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d058      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x13a>
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d86f      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 8003206:	2b30      	cmp	r3, #48	; 0x30
 8003208:	d064      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15a>
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d86b      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 800320e:	2b20      	cmp	r3, #32
 8003210:	d060      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15a>
 8003212:	2b20      	cmp	r3, #32
 8003214:	d867      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d05c      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15a>
 800321a:	2b10      	cmp	r3, #16
 800321c:	d05a      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15a>
 800321e:	e062      	b.n	80032e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003230:	f000 f967 	bl	8003502 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003242:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e04f      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800325e:	f000 f950 	bl	8003502 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003270:	609a      	str	r2, [r3, #8]
      break;
 8003272:	e03c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003280:	461a      	mov	r2, r3
 8003282:	f000 f8c7 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2150      	movs	r1, #80	; 0x50
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f91e 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8003292:	e02c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 f8e5 	bl	8003470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2160      	movs	r1, #96	; 0x60
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f90e 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 80032b2:	e01c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 f8a7 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f8fe 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f8f5 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 80032e4:	e003      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a29      	ldr	r2, [pc, #164]	; (8003408 <TIM_Base_SetConfig+0xb8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a26      	ldr	r2, [pc, #152]	; (800340c <TIM_Base_SetConfig+0xbc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <TIM_Base_SetConfig+0xc0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d108      	bne.n	8003392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <TIM_Base_SetConfig+0xb8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a19      	ldr	r2, [pc, #100]	; (800340c <TIM_Base_SetConfig+0xbc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <TIM_Base_SetConfig+0xc0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <TIM_Base_SetConfig+0xb8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	615a      	str	r2, [r3, #20]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0210 	bic.w	r2, r3, #16
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f043 0307 	orr.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	431a      	orrs	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e046      	b.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d009      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e042      	b.n	80036b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe f814 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	; 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f91d 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d16d      	bne.n	80037bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_UART_Transmit+0x2c>
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e066      	b.n	80037be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2221      	movs	r2, #33	; 0x21
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fe:	f7fe f8f1 	bl	80018e4 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	88fa      	ldrh	r2, [r7, #6]
 800370e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d108      	bne.n	800372c <HAL_UART_Transmit+0x6c>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e003      	b.n	8003734 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003734:	e02a      	b.n	800378c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f840 	bl	80037c6 <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e036      	b.n	80037be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e007      	b.n	800377e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cf      	bne.n	8003736 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f810 	bl	80037c6 <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b090      	sub	sp, #64	; 0x40
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d6:	e050      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d04c      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e6:	f7fe f87d 	bl	80018e4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d241      	bcs.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	330c      	adds	r3, #12
 8003814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003816:	637a      	str	r2, [r7, #52]	; 0x34
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800381c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3314      	adds	r3, #20
 8003848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800384a:	623a      	str	r2, [r7, #32]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	61bb      	str	r3, [r7, #24]
   return(result);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d09f      	beq.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3740      	adds	r7, #64	; 0x40
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038de:	f023 030c 	bic.w	r3, r3, #12
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <UART_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7ff f9f6 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	e002      	b.n	800391a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7ff f9de 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8003918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	4a22      	ldr	r2, [pc, #136]	; (80039bc <UART_SetConfig+0x118>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	0119      	lsls	r1, r3, #4
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009a      	lsls	r2, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <UART_SetConfig+0x118>)
 8003952:	fba3 0302 	umull	r0, r3, r3, r2
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2064      	movs	r0, #100	; 0x64
 800395a:	fb00 f303 	mul.w	r3, r0, r3
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	3332      	adds	r3, #50	; 0x32
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <UART_SetConfig+0x118>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003970:	4419      	add	r1, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fbb2 f2f3 	udiv	r2, r2, r3
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <UART_SetConfig+0x118>)
 800398a:	fba3 0302 	umull	r0, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2064      	movs	r0, #100	; 0x64
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	3332      	adds	r3, #50	; 0x32
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <UART_SetConfig+0x118>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	440a      	add	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40013800 	.word	0x40013800
 80039bc:	51eb851f 	.word	0x51eb851f

080039c0 <siprintf>:
 80039c0:	b40e      	push	{r1, r2, r3}
 80039c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039c6:	b500      	push	{lr}
 80039c8:	b09c      	sub	sp, #112	; 0x70
 80039ca:	ab1d      	add	r3, sp, #116	; 0x74
 80039cc:	9002      	str	r0, [sp, #8]
 80039ce:	9006      	str	r0, [sp, #24]
 80039d0:	9107      	str	r1, [sp, #28]
 80039d2:	9104      	str	r1, [sp, #16]
 80039d4:	4808      	ldr	r0, [pc, #32]	; (80039f8 <siprintf+0x38>)
 80039d6:	4909      	ldr	r1, [pc, #36]	; (80039fc <siprintf+0x3c>)
 80039d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039dc:	9105      	str	r1, [sp, #20]
 80039de:	6800      	ldr	r0, [r0, #0]
 80039e0:	a902      	add	r1, sp, #8
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	f000 f98e 	bl	8003d04 <_svfiprintf_r>
 80039e8:	2200      	movs	r2, #0
 80039ea:	9b02      	ldr	r3, [sp, #8]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	b01c      	add	sp, #112	; 0x70
 80039f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f4:	b003      	add	sp, #12
 80039f6:	4770      	bx	lr
 80039f8:	20000058 	.word	0x20000058
 80039fc:	ffff0208 	.word	0xffff0208

08003a00 <memset>:
 8003a00:	4603      	mov	r3, r0
 8003a02:	4402      	add	r2, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000058 	.word	0x20000058

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	2600      	movs	r6, #0
 8003a20:	4d0c      	ldr	r5, [pc, #48]	; (8003a54 <__libc_init_array+0x38>)
 8003a22:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	f000 fc7a 	bl	8004324 <_init>
 8003a30:	2600      	movs	r6, #0
 8003a32:	4d0a      	ldr	r5, [pc, #40]	; (8003a5c <__libc_init_array+0x40>)
 8003a34:	4c0a      	ldr	r4, [pc, #40]	; (8003a60 <__libc_init_array+0x44>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	080043c8 	.word	0x080043c8
 8003a58:	080043c8 	.word	0x080043c8
 8003a5c:	080043c8 	.word	0x080043c8
 8003a60:	080043cc 	.word	0x080043cc

08003a64 <__retarget_lock_acquire_recursive>:
 8003a64:	4770      	bx	lr

08003a66 <__retarget_lock_release_recursive>:
 8003a66:	4770      	bx	lr

08003a68 <_free_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d040      	beq.n	8003af2 <_free_r+0x8a>
 8003a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a74:	1f0c      	subs	r4, r1, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bfb8      	it	lt
 8003a7a:	18e4      	addlt	r4, r4, r3
 8003a7c:	f000 f8dc 	bl	8003c38 <__malloc_lock>
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <_free_r+0x8c>)
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	b933      	cbnz	r3, 8003a94 <_free_r+0x2c>
 8003a86:	6063      	str	r3, [r4, #4]
 8003a88:	6014      	str	r4, [r2, #0]
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a90:	f000 b8d8 	b.w	8003c44 <__malloc_unlock>
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d908      	bls.n	8003aaa <_free_r+0x42>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	1821      	adds	r1, r4, r0
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	bf01      	itttt	eq
 8003aa0:	6819      	ldreq	r1, [r3, #0]
 8003aa2:	685b      	ldreq	r3, [r3, #4]
 8003aa4:	1809      	addeq	r1, r1, r0
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	e7ed      	b.n	8003a86 <_free_r+0x1e>
 8003aaa:	461a      	mov	r2, r3
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	b10b      	cbz	r3, 8003ab4 <_free_r+0x4c>
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d9fa      	bls.n	8003aaa <_free_r+0x42>
 8003ab4:	6811      	ldr	r1, [r2, #0]
 8003ab6:	1850      	adds	r0, r2, r1
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d10b      	bne.n	8003ad4 <_free_r+0x6c>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	1850      	adds	r0, r2, r1
 8003ac2:	4283      	cmp	r3, r0
 8003ac4:	6011      	str	r1, [r2, #0]
 8003ac6:	d1e0      	bne.n	8003a8a <_free_r+0x22>
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4408      	add	r0, r1
 8003ace:	6010      	str	r0, [r2, #0]
 8003ad0:	6053      	str	r3, [r2, #4]
 8003ad2:	e7da      	b.n	8003a8a <_free_r+0x22>
 8003ad4:	d902      	bls.n	8003adc <_free_r+0x74>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	e7d6      	b.n	8003a8a <_free_r+0x22>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	1821      	adds	r1, r4, r0
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	bf01      	itttt	eq
 8003ae4:	6819      	ldreq	r1, [r3, #0]
 8003ae6:	685b      	ldreq	r3, [r3, #4]
 8003ae8:	1809      	addeq	r1, r1, r0
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	6063      	str	r3, [r4, #4]
 8003aee:	6054      	str	r4, [r2, #4]
 8003af0:	e7cb      	b.n	8003a8a <_free_r+0x22>
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	200005a8 	.word	0x200005a8

08003af8 <sbrk_aligned>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4e0e      	ldr	r6, [pc, #56]	; (8003b34 <sbrk_aligned+0x3c>)
 8003afc:	460c      	mov	r4, r1
 8003afe:	6831      	ldr	r1, [r6, #0]
 8003b00:	4605      	mov	r5, r0
 8003b02:	b911      	cbnz	r1, 8003b0a <sbrk_aligned+0x12>
 8003b04:	f000 fbaa 	bl	800425c <_sbrk_r>
 8003b08:	6030      	str	r0, [r6, #0]
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 fba5 	bl	800425c <_sbrk_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d00a      	beq.n	8003b2c <sbrk_aligned+0x34>
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d007      	beq.n	8003b30 <sbrk_aligned+0x38>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4628      	mov	r0, r5
 8003b24:	f000 fb9a 	bl	800425c <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d101      	bne.n	8003b30 <sbrk_aligned+0x38>
 8003b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b30:	4620      	mov	r0, r4
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	200005ac 	.word	0x200005ac

08003b38 <_malloc_r>:
 8003b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b3c:	1ccd      	adds	r5, r1, #3
 8003b3e:	f025 0503 	bic.w	r5, r5, #3
 8003b42:	3508      	adds	r5, #8
 8003b44:	2d0c      	cmp	r5, #12
 8003b46:	bf38      	it	cc
 8003b48:	250c      	movcc	r5, #12
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	db01      	blt.n	8003b54 <_malloc_r+0x1c>
 8003b50:	42a9      	cmp	r1, r5
 8003b52:	d905      	bls.n	8003b60 <_malloc_r+0x28>
 8003b54:	230c      	movs	r3, #12
 8003b56:	2600      	movs	r6, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c34 <_malloc_r+0xfc>
 8003b64:	f000 f868 	bl	8003c38 <__malloc_lock>
 8003b68:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	bb5c      	cbnz	r4, 8003bc8 <_malloc_r+0x90>
 8003b70:	4629      	mov	r1, r5
 8003b72:	4638      	mov	r0, r7
 8003b74:	f7ff ffc0 	bl	8003af8 <sbrk_aligned>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	d155      	bne.n	8003c2a <_malloc_r+0xf2>
 8003b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003b82:	4626      	mov	r6, r4
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	d145      	bne.n	8003c14 <_malloc_r+0xdc>
 8003b88:	2c00      	cmp	r4, #0
 8003b8a:	d048      	beq.n	8003c1e <_malloc_r+0xe6>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4638      	mov	r0, r7
 8003b92:	eb04 0903 	add.w	r9, r4, r3
 8003b96:	f000 fb61 	bl	800425c <_sbrk_r>
 8003b9a:	4581      	cmp	r9, r0
 8003b9c:	d13f      	bne.n	8003c1e <_malloc_r+0xe6>
 8003b9e:	6821      	ldr	r1, [r4, #0]
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	1a6d      	subs	r5, r5, r1
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7ff ffa7 	bl	8003af8 <sbrk_aligned>
 8003baa:	3001      	adds	r0, #1
 8003bac:	d037      	beq.n	8003c1e <_malloc_r+0xe6>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	442b      	add	r3, r5
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d038      	beq.n	8003c2e <_malloc_r+0xf6>
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	42a2      	cmp	r2, r4
 8003bc0:	d12b      	bne.n	8003c1a <_malloc_r+0xe2>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e00f      	b.n	8003be8 <_malloc_r+0xb0>
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	1b52      	subs	r2, r2, r5
 8003bcc:	d41f      	bmi.n	8003c0e <_malloc_r+0xd6>
 8003bce:	2a0b      	cmp	r2, #11
 8003bd0:	d917      	bls.n	8003c02 <_malloc_r+0xca>
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	6059      	strne	r1, [r3, #4]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	bf08      	it	eq
 8003be0:	f8c8 1000 	streq.w	r1, [r8]
 8003be4:	5162      	str	r2, [r4, r5]
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	4638      	mov	r0, r7
 8003bea:	f104 060b 	add.w	r6, r4, #11
 8003bee:	f000 f829 	bl	8003c44 <__malloc_unlock>
 8003bf2:	f026 0607 	bic.w	r6, r6, #7
 8003bf6:	1d23      	adds	r3, r4, #4
 8003bf8:	1af2      	subs	r2, r6, r3
 8003bfa:	d0ae      	beq.n	8003b5a <_malloc_r+0x22>
 8003bfc:	1b9b      	subs	r3, r3, r6
 8003bfe:	50a3      	str	r3, [r4, r2]
 8003c00:	e7ab      	b.n	8003b5a <_malloc_r+0x22>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	d1dd      	bne.n	8003bc4 <_malloc_r+0x8c>
 8003c08:	f8c8 2000 	str.w	r2, [r8]
 8003c0c:	e7ec      	b.n	8003be8 <_malloc_r+0xb0>
 8003c0e:	4623      	mov	r3, r4
 8003c10:	6864      	ldr	r4, [r4, #4]
 8003c12:	e7ac      	b.n	8003b6e <_malloc_r+0x36>
 8003c14:	4634      	mov	r4, r6
 8003c16:	6876      	ldr	r6, [r6, #4]
 8003c18:	e7b4      	b.n	8003b84 <_malloc_r+0x4c>
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	e7cc      	b.n	8003bb8 <_malloc_r+0x80>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	4638      	mov	r0, r7
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	f000 f80e 	bl	8003c44 <__malloc_unlock>
 8003c28:	e797      	b.n	8003b5a <_malloc_r+0x22>
 8003c2a:	6025      	str	r5, [r4, #0]
 8003c2c:	e7dc      	b.n	8003be8 <_malloc_r+0xb0>
 8003c2e:	605b      	str	r3, [r3, #4]
 8003c30:	deff      	udf	#255	; 0xff
 8003c32:	bf00      	nop
 8003c34:	200005a8 	.word	0x200005a8

08003c38 <__malloc_lock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__malloc_lock+0x8>)
 8003c3a:	f7ff bf13 	b.w	8003a64 <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	200005a4 	.word	0x200005a4

08003c44 <__malloc_unlock>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__malloc_unlock+0x8>)
 8003c46:	f7ff bf0e 	b.w	8003a66 <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	200005a4 	.word	0x200005a4

08003c50 <__ssputs_r>:
 8003c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c54:	461f      	mov	r7, r3
 8003c56:	688e      	ldr	r6, [r1, #8]
 8003c58:	4682      	mov	sl, r0
 8003c5a:	42be      	cmp	r6, r7
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	4690      	mov	r8, r2
 8003c60:	680b      	ldr	r3, [r1, #0]
 8003c62:	d82c      	bhi.n	8003cbe <__ssputs_r+0x6e>
 8003c64:	898a      	ldrh	r2, [r1, #12]
 8003c66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c6a:	d026      	beq.n	8003cba <__ssputs_r+0x6a>
 8003c6c:	6965      	ldr	r5, [r4, #20]
 8003c6e:	6909      	ldr	r1, [r1, #16]
 8003c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c74:	eba3 0901 	sub.w	r9, r3, r1
 8003c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c7c:	1c7b      	adds	r3, r7, #1
 8003c7e:	444b      	add	r3, r9
 8003c80:	106d      	asrs	r5, r5, #1
 8003c82:	429d      	cmp	r5, r3
 8003c84:	bf38      	it	cc
 8003c86:	461d      	movcc	r5, r3
 8003c88:	0553      	lsls	r3, r2, #21
 8003c8a:	d527      	bpl.n	8003cdc <__ssputs_r+0x8c>
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f7ff ff53 	bl	8003b38 <_malloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	b360      	cbz	r0, 8003cf0 <__ssputs_r+0xa0>
 8003c96:	464a      	mov	r2, r9
 8003c98:	6921      	ldr	r1, [r4, #16]
 8003c9a:	f000 fafd 	bl	8004298 <memcpy>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	6126      	str	r6, [r4, #16]
 8003cac:	444e      	add	r6, r9
 8003cae:	6026      	str	r6, [r4, #0]
 8003cb0:	463e      	mov	r6, r7
 8003cb2:	6165      	str	r5, [r4, #20]
 8003cb4:	eba5 0509 	sub.w	r5, r5, r9
 8003cb8:	60a5      	str	r5, [r4, #8]
 8003cba:	42be      	cmp	r6, r7
 8003cbc:	d900      	bls.n	8003cc0 <__ssputs_r+0x70>
 8003cbe:	463e      	mov	r6, r7
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	f000 faaf 	bl	8004228 <memmove>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	1b9b      	subs	r3, r3, r6
 8003cd0:	60a3      	str	r3, [r4, #8]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	4433      	add	r3, r6
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f000 fae9 	bl	80042b4 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e0      	bne.n	8003caa <__ssputs_r+0x5a>
 8003ce8:	4650      	mov	r0, sl
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f7ff febc 	bl	8003a68 <_free_r>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	f8ca 3000 	str.w	r3, [sl]
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e7e9      	b.n	8003cd8 <__ssputs_r+0x88>

08003d04 <_svfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	4698      	mov	r8, r3
 8003d0a:	898b      	ldrh	r3, [r1, #12]
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	460d      	mov	r5, r1
 8003d12:	4614      	mov	r4, r2
 8003d14:	b09d      	sub	sp, #116	; 0x74
 8003d16:	d50e      	bpl.n	8003d36 <_svfiprintf_r+0x32>
 8003d18:	690b      	ldr	r3, [r1, #16]
 8003d1a:	b963      	cbnz	r3, 8003d36 <_svfiprintf_r+0x32>
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	f7ff ff0b 	bl	8003b38 <_malloc_r>
 8003d22:	6028      	str	r0, [r5, #0]
 8003d24:	6128      	str	r0, [r5, #16]
 8003d26:	b920      	cbnz	r0, 8003d32 <_svfiprintf_r+0x2e>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	e0d0      	b.n	8003ed4 <_svfiprintf_r+0x1d0>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	616b      	str	r3, [r5, #20]
 8003d36:	2300      	movs	r3, #0
 8003d38:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d40:	2330      	movs	r3, #48	; 0x30
 8003d42:	f04f 0901 	mov.w	r9, #1
 8003d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003eec <_svfiprintf_r+0x1e8>
 8003d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d52:	4623      	mov	r3, r4
 8003d54:	469a      	mov	sl, r3
 8003d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d5a:	b10a      	cbz	r2, 8003d60 <_svfiprintf_r+0x5c>
 8003d5c:	2a25      	cmp	r2, #37	; 0x25
 8003d5e:	d1f9      	bne.n	8003d54 <_svfiprintf_r+0x50>
 8003d60:	ebba 0b04 	subs.w	fp, sl, r4
 8003d64:	d00b      	beq.n	8003d7e <_svfiprintf_r+0x7a>
 8003d66:	465b      	mov	r3, fp
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f7ff ff6f 	bl	8003c50 <__ssputs_r>
 8003d72:	3001      	adds	r0, #1
 8003d74:	f000 80a9 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d7a:	445a      	add	r2, fp
 8003d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a1 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d92:	f10a 0a01 	add.w	sl, sl, #1
 8003d96:	9304      	str	r3, [sp, #16]
 8003d98:	9307      	str	r3, [sp, #28]
 8003d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003da0:	4654      	mov	r4, sl
 8003da2:	2205      	movs	r2, #5
 8003da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da8:	4850      	ldr	r0, [pc, #320]	; (8003eec <_svfiprintf_r+0x1e8>)
 8003daa:	f000 fa67 	bl	800427c <memchr>
 8003dae:	9a04      	ldr	r2, [sp, #16]
 8003db0:	b9d8      	cbnz	r0, 8003dea <_svfiprintf_r+0xe6>
 8003db2:	06d0      	lsls	r0, r2, #27
 8003db4:	bf44      	itt	mi
 8003db6:	2320      	movmi	r3, #32
 8003db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dbc:	0711      	lsls	r1, r2, #28
 8003dbe:	bf44      	itt	mi
 8003dc0:	232b      	movmi	r3, #43	; 0x2b
 8003dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dca:	2b2a      	cmp	r3, #42	; 0x2a
 8003dcc:	d015      	beq.n	8003dfa <_svfiprintf_r+0xf6>
 8003dce:	4654      	mov	r4, sl
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f04f 0c0a 	mov.w	ip, #10
 8003dd6:	9a07      	ldr	r2, [sp, #28]
 8003dd8:	4621      	mov	r1, r4
 8003dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dde:	3b30      	subs	r3, #48	; 0x30
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d94d      	bls.n	8003e80 <_svfiprintf_r+0x17c>
 8003de4:	b1b0      	cbz	r0, 8003e14 <_svfiprintf_r+0x110>
 8003de6:	9207      	str	r2, [sp, #28]
 8003de8:	e014      	b.n	8003e14 <_svfiprintf_r+0x110>
 8003dea:	eba0 0308 	sub.w	r3, r0, r8
 8003dee:	fa09 f303 	lsl.w	r3, r9, r3
 8003df2:	4313      	orrs	r3, r2
 8003df4:	46a2      	mov	sl, r4
 8003df6:	9304      	str	r3, [sp, #16]
 8003df8:	e7d2      	b.n	8003da0 <_svfiprintf_r+0x9c>
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	1d19      	adds	r1, r3, #4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	9103      	str	r1, [sp, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfbb      	ittet	lt
 8003e06:	425b      	neglt	r3, r3
 8003e08:	f042 0202 	orrlt.w	r2, r2, #2
 8003e0c:	9307      	strge	r3, [sp, #28]
 8003e0e:	9307      	strlt	r3, [sp, #28]
 8003e10:	bfb8      	it	lt
 8003e12:	9204      	strlt	r2, [sp, #16]
 8003e14:	7823      	ldrb	r3, [r4, #0]
 8003e16:	2b2e      	cmp	r3, #46	; 0x2e
 8003e18:	d10c      	bne.n	8003e34 <_svfiprintf_r+0x130>
 8003e1a:	7863      	ldrb	r3, [r4, #1]
 8003e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e1e:	d134      	bne.n	8003e8a <_svfiprintf_r+0x186>
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	3402      	adds	r4, #2
 8003e24:	1d1a      	adds	r2, r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	9203      	str	r2, [sp, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfb8      	it	lt
 8003e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ef0 <_svfiprintf_r+0x1ec>
 8003e38:	2203      	movs	r2, #3
 8003e3a:	4650      	mov	r0, sl
 8003e3c:	7821      	ldrb	r1, [r4, #0]
 8003e3e:	f000 fa1d 	bl	800427c <memchr>
 8003e42:	b138      	cbz	r0, 8003e54 <_svfiprintf_r+0x150>
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	9b04      	ldr	r3, [sp, #16]
 8003e48:	eba0 000a 	sub.w	r0, r0, sl
 8003e4c:	4082      	lsls	r2, r0
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	3401      	adds	r4, #1
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e58:	2206      	movs	r2, #6
 8003e5a:	4826      	ldr	r0, [pc, #152]	; (8003ef4 <_svfiprintf_r+0x1f0>)
 8003e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e60:	f000 fa0c 	bl	800427c <memchr>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d038      	beq.n	8003eda <_svfiprintf_r+0x1d6>
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <_svfiprintf_r+0x1f4>)
 8003e6a:	bb1b      	cbnz	r3, 8003eb4 <_svfiprintf_r+0x1b0>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	3307      	adds	r3, #7
 8003e70:	f023 0307 	bic.w	r3, r3, #7
 8003e74:	3308      	adds	r3, #8
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7a:	4433      	add	r3, r6
 8003e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7e:	e768      	b.n	8003d52 <_svfiprintf_r+0x4e>
 8003e80:	460c      	mov	r4, r1
 8003e82:	2001      	movs	r0, #1
 8003e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e88:	e7a6      	b.n	8003dd8 <_svfiprintf_r+0xd4>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f04f 0c0a 	mov.w	ip, #10
 8003e90:	4619      	mov	r1, r3
 8003e92:	3401      	adds	r4, #1
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	4620      	mov	r0, r4
 8003e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e9c:	3a30      	subs	r2, #48	; 0x30
 8003e9e:	2a09      	cmp	r2, #9
 8003ea0:	d903      	bls.n	8003eaa <_svfiprintf_r+0x1a6>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c6      	beq.n	8003e34 <_svfiprintf_r+0x130>
 8003ea6:	9105      	str	r1, [sp, #20]
 8003ea8:	e7c4      	b.n	8003e34 <_svfiprintf_r+0x130>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	2301      	movs	r3, #1
 8003eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eb2:	e7f0      	b.n	8003e96 <_svfiprintf_r+0x192>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4638      	mov	r0, r7
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <_svfiprintf_r+0x1f8>)
 8003ebe:	a904      	add	r1, sp, #16
 8003ec0:	f3af 8000 	nop.w
 8003ec4:	1c42      	adds	r2, r0, #1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	d1d6      	bne.n	8003e78 <_svfiprintf_r+0x174>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	065b      	lsls	r3, r3, #25
 8003ece:	f53f af2d 	bmi.w	8003d2c <_svfiprintf_r+0x28>
 8003ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed4:	b01d      	add	sp, #116	; 0x74
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	ab03      	add	r3, sp, #12
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	462a      	mov	r2, r5
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <_svfiprintf_r+0x1f8>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	f000 f87d 	bl	8003fe4 <_printf_i>
 8003eea:	e7eb      	b.n	8003ec4 <_svfiprintf_r+0x1c0>
 8003eec:	08004392 	.word	0x08004392
 8003ef0:	08004398 	.word	0x08004398
 8003ef4:	0800439c 	.word	0x0800439c
 8003ef8:	00000000 	.word	0x00000000
 8003efc:	08003c51 	.word	0x08003c51

08003f00 <_printf_common>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	4616      	mov	r6, r2
 8003f06:	4699      	mov	r9, r3
 8003f08:	688a      	ldr	r2, [r1, #8]
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bfb8      	it	lt
 8003f12:	4613      	movlt	r3, r2
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f20:	b10a      	cbz	r2, 8003f26 <_printf_common+0x26>
 8003f22:	3301      	adds	r3, #1
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	0699      	lsls	r1, r3, #26
 8003f2a:	bf42      	ittt	mi
 8003f2c:	6833      	ldrmi	r3, [r6, #0]
 8003f2e:	3302      	addmi	r3, #2
 8003f30:	6033      	strmi	r3, [r6, #0]
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f015 0506 	ands.w	r5, r5, #6
 8003f38:	d106      	bne.n	8003f48 <_printf_common+0x48>
 8003f3a:	f104 0a19 	add.w	sl, r4, #25
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	6832      	ldr	r2, [r6, #0]
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	42ab      	cmp	r3, r5
 8003f46:	dc2b      	bgt.n	8003fa0 <_printf_common+0xa0>
 8003f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f4c:	1e13      	subs	r3, r2, #0
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	bf18      	it	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	0692      	lsls	r2, r2, #26
 8003f56:	d430      	bmi.n	8003fba <_printf_common+0xba>
 8003f58:	4649      	mov	r1, r9
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f60:	47c0      	blx	r8
 8003f62:	3001      	adds	r0, #1
 8003f64:	d023      	beq.n	8003fae <_printf_common+0xae>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	f003 0306 	and.w	r3, r3, #6
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	bf14      	ite	ne
 8003f72:	2500      	movne	r5, #0
 8003f74:	6833      	ldreq	r3, [r6, #0]
 8003f76:	f04f 0600 	mov.w	r6, #0
 8003f7a:	bf08      	it	eq
 8003f7c:	68e5      	ldreq	r5, [r4, #12]
 8003f7e:	f104 041a 	add.w	r4, r4, #26
 8003f82:	bf08      	it	eq
 8003f84:	1aed      	subeq	r5, r5, r3
 8003f86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f8a:	bf08      	it	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfc4      	itt	gt
 8003f94:	1a9b      	subgt	r3, r3, r2
 8003f96:	18ed      	addgt	r5, r5, r3
 8003f98:	42b5      	cmp	r5, r6
 8003f9a:	d11a      	bne.n	8003fd2 <_printf_common+0xd2>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e008      	b.n	8003fb2 <_printf_common+0xb2>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c0      	blx	r8
 8003faa:	3001      	adds	r0, #1
 8003fac:	d103      	bne.n	8003fb6 <_printf_common+0xb6>
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb6:	3501      	adds	r5, #1
 8003fb8:	e7c1      	b.n	8003f3e <_printf_common+0x3e>
 8003fba:	2030      	movs	r0, #48	; 0x30
 8003fbc:	18e1      	adds	r1, r4, r3
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc8:	4422      	add	r2, r4
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd0:	e7c2      	b.n	8003f58 <_printf_common+0x58>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	4638      	mov	r0, r7
 8003fda:	47c0      	blx	r8
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d0e6      	beq.n	8003fae <_printf_common+0xae>
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7d9      	b.n	8003f98 <_printf_common+0x98>

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	4691      	mov	r9, r2
 8003fec:	2f78      	cmp	r7, #120	; 0x78
 8003fee:	4680      	mov	r8, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	469a      	mov	sl, r3
 8003ff4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	; 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d5 	beq.w	80041b0 <_printf_i+0x1cc>
 8004006:	2f58      	cmp	r7, #88	; 0x58
 8004008:	f000 80c1 	beq.w	800418e <_printf_i+0x1aa>
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	; (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	08004197 	.word	0x08004197
 8004054:	080040bd 	.word	0x080040bd
 8004058:	08004151 	.word	0x08004151
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041b9 	.word	0x080041b9
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040bd 	.word	0x080040bd
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004159 	.word	0x08004159
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	602a      	str	r2, [r5, #0]
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e0a0      	b.n	80041d2 <_printf_i+0x1ee>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	682b      	ldr	r3, [r5, #0]
 8004094:	0607      	lsls	r7, r0, #24
 8004096:	f103 0104 	add.w	r1, r3, #4
 800409a:	6029      	str	r1, [r5, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0xbe>
 800409e:	681e      	ldr	r6, [r3, #0]
 80040a0:	e003      	b.n	80040aa <_printf_i+0xc6>
 80040a2:	0646      	lsls	r6, r0, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0xba>
 80040a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040aa:	2e00      	cmp	r6, #0
 80040ac:	da03      	bge.n	80040b6 <_printf_i+0xd2>
 80040ae:	232d      	movs	r3, #45	; 0x2d
 80040b0:	4276      	negs	r6, r6
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b6:	230a      	movs	r3, #10
 80040b8:	4859      	ldr	r0, [pc, #356]	; (8004220 <_printf_i+0x23c>)
 80040ba:	e012      	b.n	80040e2 <_printf_i+0xfe>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	1d19      	adds	r1, r3, #4
 80040c2:	6029      	str	r1, [r5, #0]
 80040c4:	0605      	lsls	r5, r0, #24
 80040c6:	d501      	bpl.n	80040cc <_printf_i+0xe8>
 80040c8:	681e      	ldr	r6, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <_printf_i+0xee>
 80040cc:	0641      	lsls	r1, r0, #25
 80040ce:	d5fb      	bpl.n	80040c8 <_printf_i+0xe4>
 80040d0:	881e      	ldrh	r6, [r3, #0]
 80040d2:	2f6f      	cmp	r7, #111	; 0x6f
 80040d4:	bf0c      	ite	eq
 80040d6:	2308      	moveq	r3, #8
 80040d8:	230a      	movne	r3, #10
 80040da:	4851      	ldr	r0, [pc, #324]	; (8004220 <_printf_i+0x23c>)
 80040dc:	2100      	movs	r1, #0
 80040de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e2:	6865      	ldr	r5, [r4, #4]
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	bfa8      	it	ge
 80040e8:	6821      	ldrge	r1, [r4, #0]
 80040ea:	60a5      	str	r5, [r4, #8]
 80040ec:	bfa4      	itt	ge
 80040ee:	f021 0104 	bicge.w	r1, r1, #4
 80040f2:	6021      	strge	r1, [r4, #0]
 80040f4:	b90e      	cbnz	r6, 80040fa <_printf_i+0x116>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	d04b      	beq.n	8004192 <_printf_i+0x1ae>
 80040fa:	4615      	mov	r5, r2
 80040fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004100:	fb03 6711 	mls	r7, r3, r1, r6
 8004104:	5dc7      	ldrb	r7, [r0, r7]
 8004106:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800410a:	4637      	mov	r7, r6
 800410c:	42bb      	cmp	r3, r7
 800410e:	460e      	mov	r6, r1
 8004110:	d9f4      	bls.n	80040fc <_printf_i+0x118>
 8004112:	2b08      	cmp	r3, #8
 8004114:	d10b      	bne.n	800412e <_printf_i+0x14a>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	07de      	lsls	r6, r3, #31
 800411a:	d508      	bpl.n	800412e <_printf_i+0x14a>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6861      	ldr	r1, [r4, #4]
 8004120:	4299      	cmp	r1, r3
 8004122:	bfde      	ittt	le
 8004124:	2330      	movle	r3, #48	; 0x30
 8004126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800412e:	1b52      	subs	r2, r2, r5
 8004130:	6122      	str	r2, [r4, #16]
 8004132:	464b      	mov	r3, r9
 8004134:	4621      	mov	r1, r4
 8004136:	4640      	mov	r0, r8
 8004138:	f8cd a000 	str.w	sl, [sp]
 800413c:	aa03      	add	r2, sp, #12
 800413e:	f7ff fedf 	bl	8003f00 <_printf_common>
 8004142:	3001      	adds	r0, #1
 8004144:	d14a      	bne.n	80041dc <_printf_i+0x1f8>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	b004      	add	sp, #16
 800414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f043 0320 	orr.w	r3, r3, #32
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	2778      	movs	r7, #120	; 0x78
 800415a:	4832      	ldr	r0, [pc, #200]	; (8004224 <_printf_i+0x240>)
 800415c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	6829      	ldr	r1, [r5, #0]
 8004164:	061f      	lsls	r7, r3, #24
 8004166:	f851 6b04 	ldr.w	r6, [r1], #4
 800416a:	d402      	bmi.n	8004172 <_printf_i+0x18e>
 800416c:	065f      	lsls	r7, r3, #25
 800416e:	bf48      	it	mi
 8004170:	b2b6      	uxthmi	r6, r6
 8004172:	07df      	lsls	r7, r3, #31
 8004174:	bf48      	it	mi
 8004176:	f043 0320 	orrmi.w	r3, r3, #32
 800417a:	6029      	str	r1, [r5, #0]
 800417c:	bf48      	it	mi
 800417e:	6023      	strmi	r3, [r4, #0]
 8004180:	b91e      	cbnz	r6, 800418a <_printf_i+0x1a6>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f023 0320 	bic.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	2310      	movs	r3, #16
 800418c:	e7a6      	b.n	80040dc <_printf_i+0xf8>
 800418e:	4824      	ldr	r0, [pc, #144]	; (8004220 <_printf_i+0x23c>)
 8004190:	e7e4      	b.n	800415c <_printf_i+0x178>
 8004192:	4615      	mov	r5, r2
 8004194:	e7bd      	b.n	8004112 <_printf_i+0x12e>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	6826      	ldr	r6, [r4, #0]
 800419a:	1d18      	adds	r0, r3, #4
 800419c:	6961      	ldr	r1, [r4, #20]
 800419e:	6028      	str	r0, [r5, #0]
 80041a0:	0635      	lsls	r5, r6, #24
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	d501      	bpl.n	80041aa <_printf_i+0x1c6>
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	e002      	b.n	80041b0 <_printf_i+0x1cc>
 80041aa:	0670      	lsls	r0, r6, #25
 80041ac:	d5fb      	bpl.n	80041a6 <_printf_i+0x1c2>
 80041ae:	8019      	strh	r1, [r3, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	4615      	mov	r5, r2
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	e7bc      	b.n	8004132 <_printf_i+0x14e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	2100      	movs	r1, #0
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	681d      	ldr	r5, [r3, #0]
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 f859 	bl	800427c <memchr>
 80041ca:	b108      	cbz	r0, 80041d0 <_printf_i+0x1ec>
 80041cc:	1b40      	subs	r0, r0, r5
 80041ce:	6060      	str	r0, [r4, #4]
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	2300      	movs	r3, #0
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	e7aa      	b.n	8004132 <_printf_i+0x14e>
 80041dc:	462a      	mov	r2, r5
 80041de:	4649      	mov	r1, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	47d0      	blx	sl
 80041e6:	3001      	adds	r0, #1
 80041e8:	d0ad      	beq.n	8004146 <_printf_i+0x162>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	079b      	lsls	r3, r3, #30
 80041ee:	d413      	bmi.n	8004218 <_printf_i+0x234>
 80041f0:	68e0      	ldr	r0, [r4, #12]
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	4298      	cmp	r0, r3
 80041f6:	bfb8      	it	lt
 80041f8:	4618      	movlt	r0, r3
 80041fa:	e7a6      	b.n	800414a <_printf_i+0x166>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4632      	mov	r2, r6
 8004200:	4649      	mov	r1, r9
 8004202:	4640      	mov	r0, r8
 8004204:	47d0      	blx	sl
 8004206:	3001      	adds	r0, #1
 8004208:	d09d      	beq.n	8004146 <_printf_i+0x162>
 800420a:	3501      	adds	r5, #1
 800420c:	68e3      	ldr	r3, [r4, #12]
 800420e:	9903      	ldr	r1, [sp, #12]
 8004210:	1a5b      	subs	r3, r3, r1
 8004212:	42ab      	cmp	r3, r5
 8004214:	dcf2      	bgt.n	80041fc <_printf_i+0x218>
 8004216:	e7eb      	b.n	80041f0 <_printf_i+0x20c>
 8004218:	2500      	movs	r5, #0
 800421a:	f104 0619 	add.w	r6, r4, #25
 800421e:	e7f5      	b.n	800420c <_printf_i+0x228>
 8004220:	080043a3 	.word	0x080043a3
 8004224:	080043b4 	.word	0x080043b4

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0402 	add.w	r4, r1, r2
 8004230:	d902      	bls.n	8004238 <memmove+0x10>
 8004232:	4284      	cmp	r4, r0
 8004234:	4623      	mov	r3, r4
 8004236:	d807      	bhi.n	8004248 <memmove+0x20>
 8004238:	1e43      	subs	r3, r0, #1
 800423a:	42a1      	cmp	r1, r4
 800423c:	d008      	beq.n	8004250 <memmove+0x28>
 800423e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004246:	e7f8      	b.n	800423a <memmove+0x12>
 8004248:	4601      	mov	r1, r0
 800424a:	4402      	add	r2, r0
 800424c:	428a      	cmp	r2, r1
 800424e:	d100      	bne.n	8004252 <memmove+0x2a>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425a:	e7f7      	b.n	800424c <memmove+0x24>

0800425c <_sbrk_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	2300      	movs	r3, #0
 8004260:	4d05      	ldr	r5, [pc, #20]	; (8004278 <_sbrk_r+0x1c>)
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	602b      	str	r3, [r5, #0]
 8004268:	f7fd fa82 	bl	8001770 <_sbrk>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_sbrk_r+0x1a>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_sbrk_r+0x1a>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	200005a0 	.word	0x200005a0

0800427c <memchr>:
 800427c:	4603      	mov	r3, r0
 800427e:	b510      	push	{r4, lr}
 8004280:	b2c9      	uxtb	r1, r1
 8004282:	4402      	add	r2, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	4618      	mov	r0, r3
 8004288:	d101      	bne.n	800428e <memchr+0x12>
 800428a:	2000      	movs	r0, #0
 800428c:	e003      	b.n	8004296 <memchr+0x1a>
 800428e:	7804      	ldrb	r4, [r0, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	428c      	cmp	r4, r1
 8004294:	d1f6      	bne.n	8004284 <memchr+0x8>
 8004296:	bd10      	pop	{r4, pc}

08004298 <memcpy>:
 8004298:	440a      	add	r2, r1
 800429a:	4291      	cmp	r1, r2
 800429c:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a0:	d100      	bne.n	80042a4 <memcpy+0xc>
 80042a2:	4770      	bx	lr
 80042a4:	b510      	push	{r4, lr}
 80042a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042aa:	4291      	cmp	r1, r2
 80042ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b0:	d1f9      	bne.n	80042a6 <memcpy+0xe>
 80042b2:	bd10      	pop	{r4, pc}

080042b4 <_realloc_r>:
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	4680      	mov	r8, r0
 80042ba:	4614      	mov	r4, r2
 80042bc:	460e      	mov	r6, r1
 80042be:	b921      	cbnz	r1, 80042ca <_realloc_r+0x16>
 80042c0:	4611      	mov	r1, r2
 80042c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042c6:	f7ff bc37 	b.w	8003b38 <_malloc_r>
 80042ca:	b92a      	cbnz	r2, 80042d8 <_realloc_r+0x24>
 80042cc:	f7ff fbcc 	bl	8003a68 <_free_r>
 80042d0:	4625      	mov	r5, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d8:	f000 f81b 	bl	8004312 <_malloc_usable_size_r>
 80042dc:	4284      	cmp	r4, r0
 80042de:	4607      	mov	r7, r0
 80042e0:	d802      	bhi.n	80042e8 <_realloc_r+0x34>
 80042e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042e6:	d812      	bhi.n	800430e <_realloc_r+0x5a>
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fc24 	bl	8003b38 <_malloc_r>
 80042f0:	4605      	mov	r5, r0
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d0ed      	beq.n	80042d2 <_realloc_r+0x1e>
 80042f6:	42bc      	cmp	r4, r7
 80042f8:	4622      	mov	r2, r4
 80042fa:	4631      	mov	r1, r6
 80042fc:	bf28      	it	cs
 80042fe:	463a      	movcs	r2, r7
 8004300:	f7ff ffca 	bl	8004298 <memcpy>
 8004304:	4631      	mov	r1, r6
 8004306:	4640      	mov	r0, r8
 8004308:	f7ff fbae 	bl	8003a68 <_free_r>
 800430c:	e7e1      	b.n	80042d2 <_realloc_r+0x1e>
 800430e:	4635      	mov	r5, r6
 8004310:	e7df      	b.n	80042d2 <_realloc_r+0x1e>

08004312 <_malloc_usable_size_r>:
 8004312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004316:	1f18      	subs	r0, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfbc      	itt	lt
 800431c:	580b      	ldrlt	r3, [r1, r0]
 800431e:	18c0      	addlt	r0, r0, r3
 8004320:	4770      	bx	lr
	...

08004324 <_init>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr

08004330 <_fini>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr
